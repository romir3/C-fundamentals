 datatype1 function_name(param 1,param2,..) ==function defination
datatyp1 is the datatype for return type  or output of function
param1,param2, are inputs to function


function call==
output  = function_name(input1,input2,..) INPUT=ARGUMENT TO BE IN PLACE OF PARAMETERS

example void dan(int age)
void if there is no return value for a function

call 
dan(2)
 implicit conversions if param is int for a function but u gave a double as input function implicitly converts it to int for use

variables generated inside function if match with given inputs to the function just are local var that take value of input use it and die when function ends
so changes in such var dont affect the actual inputs used here fotr function

functions need to be declared before int main()

sometimes functions can be declared without being defined before the int main() and it later can be defined after the int main 
this declaration type is called header ex == void ran(int a,int b);
this declared function needs to be defined later to show its use ex void ran(int a,int b){
    int c=a+b;
    std::cout<<c<<"\n";
function declaration only includes  header that needs to be before int main()
function defination includes full function

also function needs to be declared first before defined so if header exists it needs to be before function call
if there is no header we need to have entire function defined before function call or int main()


source file --(preprocessing)--> translation units( #include statements from source file has all its headers included copied here) -----(compilation)-->object(binary representation of translation unit)---(linker)---> all binary files combined here
no. of translation units==no. of objects


#include is a preprocessor directive that has preprocessor go to the file in #include file and pastes all stuff in that file in place of #include file

how to execute multi file linker== g++ main.cpp function.cpp -o text
function file = function.h + function.cpp

in a multi file funcion its the linker that finds and combines objects for final binary executable
pass by value has no pointer involved so var inside and outside function maybe named same but diff var (local and global) and occupy diff spaces in memory

pass by pointer
here local pointer age points to global var age,so changes in local pointer value cause changes in global var age
#include <iostream>

void say_age(int* age); // Declaration

int main(){

    int age{23}; // Local
    std::cout << "age (before call) : " << age << "&age : " << &age << std::endl; //23
    say_age(&age); // Argument
    std::cout << "age (after call) : " << age << "&age : " << &age <<  std::endl; //24

    return 0;
}


void say_age(int* age){ // Parameter
    ++(*age); 
    std::cout <<  "Hello , you are " << *age << " years old! &age : " << &age <<  std::endl;//24

for pass by reference juts use void func(int & a)
function call == func(a)
  std::cout <<  "Hello , you are " << age << " years old! &age : " << &age <<  std::endl;
so local a is refernce of global a
 here changes in local affect globzl var too as local is a referevce to global
so share same memory

function paramterd can also input and output
normally we need output changes inside function to reflect on output global var too so we define ouptut using references or pointers
function(const std::string input, std::string &output) here changes doen in output will be reflected outside the function too as its a reference
here there is no need to return as output being a refrence input parameter for a function gets updated during the function
strings generally take lot of memory space so we use return by reference instead of return by value when it comes to strings as it takes up lot of memory to create 2 strings (local and global ) in return by value
sometimes even if code is written for return by value when it comes to std::strings the compiler optimises the code by default by assigning the same memory to local and global variable used here thereby returning by reference

Function overloading
same function name different parameters (each overloaded subpart of a function name is free to have different function defination)
ex max(int a,int b) and max(double a, double b) etc....
functions can be overloaded by changing parameter-
1}order
2}number
3}datatype
You cant overload functions on return type alone as return type isnt used that much to differentiate functions
for multiple overloaded parts of a function name the compiler selects the overloaded subpart of function based on inputs in function call

2. String View
A string view is a lightweight, non-owning reference to a string or part of a string.
It does not manage memory; it merely provides a way to access characters of an existing string (or literal) without copying them.
In C++, std::string_view was introduced in C++17 to enable efficient string handling without the overhead of copying
ex #include <string_view>

std::string_view view = "Hello, World!";


1. String Literal
A string literal is a fixed sequence of characters enclosed in double quotes, like "Hello, World!".
It is stored as a constant array of characters, usually in read-only memory.
In C++, string literals are null-terminated by default (\0 is appended at the end).
ex const char* str = "Hello, World!";

Share


You said:
whats the difference between string view and string literal
ChatGPT said:
ChatGPT
The difference between a string view and a string literal lies in their purpose, behavior, and implementation, particularly in programming languages like C++.

1. String Literal
A string literal is a fixed sequence of characters enclosed in double quotes, like "Hello, World!".
It is stored as a constant array of characters, usually in read-only memory.
In C++, string literals are null-terminated by default (\0 is appended at the end).
Example:
cpp
Copy code
const char* str = "Hello, World!";
Characteristics:

The memory is managed by the compiler.
String literals are immutable; modifying their contents is undefined behavior.
The type of a string literal in C++ is const char[].
2. String View
A string view is a lightweight, non-owning reference to a string or part of a string.
It does not manage memory; it merely provides a way to access characters of an existing string (or literal) without copying them.
In C++, std::string_view was introduced in C++17 to enable efficient string handling without the overhead of copying.
Example:
cpp
Copy code
#include <string_view>

std::string_view view = "Hello, World!";
Characteristics:

It is not null-terminated, unlike string literals.
It is often used for read-only operations on strings or substrings.
Modifying the underlying string (if it's mutable) while a string_view refers to it leads to undefined behavior.
Key Differences:
Feature	String Literal	    String View
Ownership	Owns its memory.   	Non-owning reference.
Memory Management	Compiler-managed.   	Does not manage memory.
Immutability	Immutable (modifying causes undefined behavior).	    Read-only by design.
Null Termination	Null-terminated.	    Not necessarily null-terminated.
Use Case	Storing fixed, immutable strings.    	Efficient manipulation of existing strings or substrings.
Type	const char[]	.    std::string_view (in C++).

#include <iostream>
#include <string_view>

void printSubstring(std::string_view sv) ;
    
int main() {
    std::string str = "Hello, World!";
    printSubstring(str.substr(7));        // Creates a temporary substring.
    printSubstring(std::string_view(str).substr(7)); // No allocation or copy.
    return 0;
}

void printSubstring(std::string_view sv) {
    std::cout << sv << '\n';} 

Lambda functions:->
[capture list](parameters)-> return type{ function body};
return type is optional and can be solved by compiler

auto func =[capture list](parameters)-> return type{ function body};/function defination
func(parameter vise inputs);/function call
here func is name of lambda function that can be used for function call

nameless lambda function
[capture list](parameters)-> return type{ function body}(parameter vise inputs);/function defination+function call

capture list gives var captured by function in surrounding scope
for lambda function if there is no return value then function need not return a value to any var and can be declared and definied just like taht
example: [](double a){ std::cout<<a;}(10.2);
if return value present then:
auto result=[](double a){return a;}(10.2);
here result stores output of lambda func

lambda function can stored directly in output ex
std::cout<< [](double a){ return a;}(10.2)<<std::endl;
or auto func=[](double a){return a;}; func is function name of lambda function here
std::cout<< func(10.2)<<std::endl;

in return by value a copy of variable(local) is created so may have different address values 
in return by refernce no var are copied all are related to same address

capture by value for lamdafunc
int a;
auto func= [a](){ std::cout<<a;}; here  intitated var a ka value is captured for use by lamda func as a copy of var a is created to use by func
if we do this: auto func= [&a](){ std::cout<<a;}; its capture by reference the var'a' used in func and the var 'a' used outside hold same memory so no copying var takes place
if we want to capture every var declared  outside lambda functiom by value use [=] for capture list
same but capture all by reference use [&] for capture list



i

}

Function templates:
template <typename T> T maximum(T a,T b); #template declaration

template <typename T> T maximum(T a,T b){
function body
}
here T  = datatype 
maximum =name of overloaded function
c++ compiler generates real function after looking at templates called template instance


if we say func<double>(a,b) it means we are explicitly generating a template instance of double for inputs a and b , such function allows implicit conversions of int to double if a/b is int which is normally not possible if we directly acess the template as that needs both inputs of samet ype to generate a valid template instance
here by making temp instance double predefined there is space for implicit datatype conversions

template <typename T> T maximum(T a,T b); ==> template type parameters by value
template <typename T> const T& maximum(const T& a,const T& b); : parameter by reference

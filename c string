c-string

 #include<cctype>
isalnum
 checks if a character is alphanumeric
(function)
alphanumeric means alphabets and numbers

isalpha
 checks if a character is alphabetic
(function)

islower
 checks if a character is lowercase
(function)

isupper
 checks if a character is an uppercase character
(function)

isdigit
 checks if a character is a digit
(function)

isxdigit
 checks if a character is a hexadecimal character
(function)

iscntrl
 checks if a character is a control character
(function)

isgraph
 checks if a character is a graphical character
(function)

isspace
 checks if a character is a space character
(function)

isblank
  
(C++11)
checks if a character is a blank character
(function)

isprint
 checks if a character is a printing character
(function)

ispunct
 checks if a character is a punctuation character
(function)

tolower
 converts a character to lowercase
(function)

toupper
 converts a character to uppercase
(function)
 'is' functions return bool value 'to' return changed values
bool=1 if true
0 if false



application==std::isalnum(input);
namespace std {
  int isalnum(int c);
  int isalpha(int c);
  int isblank(int c);
  int iscntrl(int c);
  int isdigit(int c);
  int isgraph(int c);
  int islower(int c);
  int isprint(int c);
  int ispunct(int c);
  int isspace(int c);
  int isupper(int c);
  int isxdigit(int c);
  int tolower(int c);
  int toupper(int c);
}
#include<cstring>
std::strlen(str) for length of string str
can find length of str if str is a string or length of the message pointer str is pointing to
std::strcmp(str1,str2)==
gives 0 if both strings same
negative if lhs string comes before RHS string in lexicographic order
positive if vice versa
this comparison happens for first byte of difference between strings

std::strncmp(str1,str2,n)
n=no. of places to compare in the strings

you cant change where a string points

Summary of Assignability
String Type	Assignable to New Value?	Example
char[]	❌	Compile-time error if assigned directly.
char*	✔ (Pointer reassignment)	Pointer can be reassigned.
std::string	✔	Fully assignable.

const char* result{};
result=std::strchr(str,target);
strchr gives pointer for the location of target element in string
str is pointer for string(basically points first element of string)
so absoloute location of target = std::strchr(str,target) -str;

 while((result = std::strchr(result, ch)) != nullptr) {
        std::cout << "Character '" << ch << "' found at position: "
                  << (result - str) << std::endl;
ptr here shifts from start of string to target position of string

if strchr finds first appearence of a target
strrchr finds last appearenc of a target
std::strcat(str1,str2); == concatenetes str2 to str1 and stored in str1
std::strncat(str1,str2,n); == concatenetes first n charectars of str2 to str1 and stored in str1

if strcat appends, strcpy replaces
std::strcpy(str1,str2) == replaces elements of str1 by elements of str2 and stores new string in str1

std::strncpy(str1,str2,n) == replaces first n elements of str1 by elements of str2 and stores new string in str1

#include<string>
 std::string str; = emptystring str
std::string str1{"gqefewukfhif"} = non empty string str1
std::string str2{str1}= intitialised by other string
std::string str2{"abcdef",4}= grabs only  4 chars in string literal
std::string str2{5,'e'}= creates a string having char e copied 4 times


std::string str2{str1,6,5}= intitialised by other string and starting at index 6 , grabs first 5 chars of str1

str2 ={"lknf"}=std::string allows reassignment of string data to str2 without space waste as on reassignment initial memory occupied by string is destroyed for str2 to point to other memory with different string data
same cant be said for const char*ptr{"akal"}
ptr={"ewdjsoik"}, this causes ptr to simply point to diff memory having given string data while intilaly memory location hacing string datat akal doesnt get destroyed like before and simply stays wasting memory resources

vector<string> strname ; # we can use vector to declare an array and then later assign values to it

c-string

 #include<cctype>
isalnum
 checks if a character is alphanumeric
(function)
alphanumeric means alphabets and numbers

isalpha
 checks if a character is alphabetic
(function)

islower
 checks if a character is lowercase
(function)

isupper
 checks if a character is an uppercase character
(function)

isdigit
 checks if a character is a digit
(function)

isxdigit
 checks if a character is a hexadecimal character
(function)

iscntrl
 checks if a character is a control character
(function)

isgraph
 checks if a character is a graphical character
(function)

isspace
 checks if a character is a space character
(function)

isblank
  
(C++11)
checks if a character is a blank character
(function)

isprint
 checks if a character is a printing character
(function)

ispunct
 checks if a character is a punctuation character
(function)

tolower
 converts a character to lowercase
(function)

toupper
 converts a character to uppercase
(function)
 'is' functions return bool value 'to' return changed values
bool=1 if true
0 if false



application==std::isalnum(input);
namespace std {
  int isalnum(int c);
  int isalpha(int c);
  int isblank(int c);
  int iscntrl(int c);
  int isdigit(int c);
  int isgraph(int c);
  int islower(int c);
  int isprint(int c);
  int ispunct(int c);
  int isspace(int c);
  int isupper(int c);
  int isxdigit(int c);
  int tolower(int c);
  int toupper(int c);
}
#include<cstring>
std::strlen(str) for length of string str
can find length of str if str is a string or length of the message pointer str is pointing to
std::strcmp(str1,str2)==
gives 0 if both strings same
negative if lhs string comes before RHS string in lexicographic order
positive if vice versa
this comparison happens for first byte of difference between strings

std::strncmp(str1,str2,n)
n=no. of places to compare in the strings

you cant change where a string points

Summary of Assignability
String Type	Assignable to New Value?	Example
char[]	❌	Compile-time error if assigned directly.
char*	✔ (Pointer reassignment)	Pointer can be reassigned.
std::string	✔	Fully assignable.

const char* result{};
result=std::strchr(str,target);
strchr gives pointer for the location of target element in string
str is pointer for string(basically points first element of string)
so absoloute location of target = std::strchr(str,target) -str;

 while((result = std::strchr(result, ch)) != nullptr) {
        std::cout << "Character '" << ch << "' found at position: "
                  << (result - str) << std::endl;
ptr here shifts from start of string to target position of string

if strchr finds first appearence of a target
strrchr finds last appearenc of a target
